/* eslint-disable react/prop-types */
import React, { useEffect, useRef, useState } from 'react';
import slidy from './slidy';

function noop(_) {}

function convertToArrayFrom(children) {
  return Array.isArray(children) ? children : [children];
}

function getItemsToRender(_ref) {
  var index = _ref.index,
      maxIndex = _ref.maxIndex,
      items = _ref.items,
      itemsToPreload = _ref.itemsToPreload,
      numOfSlides = _ref.numOfSlides;
  var preload = Math.max(itemsToPreload, numOfSlides);

  if (index >= items.length - numOfSlides) {
    var addNewItems = items.length > numOfSlides ? items.slice(0, numOfSlides - 1) : [];
    return [].concat(items.slice(0, maxIndex + preload), addNewItems);
  } else {
    return items.slice(0, maxIndex + preload);
  }
}

function destroySlider(slidyInstance, doAfterDestroy) {
  slidyInstance && slidyInstance.clean() && slidyInstance.destroy();
  doAfterDestroy();
}

var renderItem = function renderItem(numOfSlides) {
  return function (item, index) {
    var inlineStyle = numOfSlides !== 1 ? {
      width: 100 / numOfSlides + "%"
    } : {};
    return /*#__PURE__*/React.createElement("li", {
      key: index,
      style: inlineStyle
    }, item);
  };
};

export default function ReactSlidySlider(_ref2) {
  var ArrowLeft = _ref2.ArrowLeft,
      ArrowRight = _ref2.ArrowRight,
      children = _ref2.children,
      classNameBase = _ref2.classNameBase,
      doAfterDestroy = _ref2.doAfterDestroy,
      doAfterInit = _ref2.doAfterInit,
      doAfterSlide = _ref2.doAfterSlide,
      doBeforeSlide = _ref2.doBeforeSlide,
      ease = _ref2.ease,
      initialSlide = _ref2.initialSlide,
      itemsToPreload = _ref2.itemsToPreload,
      keyboardNavigation = _ref2.keyboardNavigation,
      numOfSlides = _ref2.numOfSlides,
      slide = _ref2.slide,
      showArrows = _ref2.showArrows,
      slideSpeed = _ref2.slideSpeed;

  var _useState = useState({
    goTo: noop,
    next: noop,
    prev: noop,
    updateItems: noop
  }),
      slidyInstance = _useState[0],
      setSlidyInstance = _useState[1];

  var _useState2 = useState(initialSlide),
      index = _useState2[0],
      setIndex = _useState2[1];

  var _useState3 = useState(initialSlide),
      maxIndex = _useState3[0],
      setMaxIndex = _useState3[1];

  var sliderContainerDOMEl = useRef(null);
  var slidesDOMEl = useRef(null);
  var items = convertToArrayFrom(children);
  useEffect(function () {
    slide !== index && slidyInstance.goTo(slide);
  }, [slide] // eslint-disable-line
  );
  useEffect(function () {
    var handleKeyboard;
    var slidyInstance = slidy(sliderContainerDOMEl.current, {
      ease: ease,
      doAfterSlide: doAfterSlide,
      doBeforeSlide: doBeforeSlide,
      numOfSlides: numOfSlides,
      slideSpeed: slideSpeed,
      slidesDOMEl: slidesDOMEl.current,
      initialSlide: index,
      items: items.length,
      onNext: function onNext(nextIndex) {
        setIndex(nextIndex);
        nextIndex > maxIndex && setMaxIndex(nextIndex);
        return nextIndex;
      },
      onPrev: function onPrev(nextIndex) {
        setIndex(nextIndex);
        return nextIndex;
      }
    });
    setSlidyInstance(slidyInstance);
    doAfterInit();

    if (keyboardNavigation) {
      handleKeyboard = function handleKeyboard(e) {
        if (e.keyCode === 39) slidyInstance.next(e);else if (e.keyCode === 37) slidyInstance.prev(e);
      };

      document.addEventListener('keydown', handleKeyboard);
    }

    return function () {
      destroySlider(slidyInstance, doAfterDestroy);

      if (keyboardNavigation) {
        document.removeEventListener('keydown', handleKeyboard);
      }
    };
  }, [] // eslint-disable-line
  );
  useEffect(function () {
    slidyInstance && slidyInstance.updateItems(items.length);
  });
  var itemsToRender = getItemsToRender({
    index: index,
    maxIndex: maxIndex,
    items: items,
    itemsToPreload: itemsToPreload,
    numOfSlides: numOfSlides
  });

  var handlePrev = function handlePrev(e) {
    return slidyInstance.prev(e);
  };

  var handleNext = function handleNext(e) {
    return items.length > numOfSlides && slidyInstance.next(e);
  };

  var renderLeftArrow = function renderLeftArrow() {
    var disabled = index === 0;
    var props = {
      disabled: disabled,
      onClick: handlePrev
    };
    var leftArrowClasses = classNameBase + "-arrow " + classNameBase + "-arrowLeft";
    if (ArrowLeft) return /*#__PURE__*/React.createElement(ArrowLeft, Object.assign({}, props, {
      className: leftArrowClasses
    }));
    return /*#__PURE__*/React.createElement("span", Object.assign({
      "arial-label": "Previous",
      className: leftArrowClasses + " " + classNameBase + "-prev",
      role: "button"
    }, props));
  };

  var renderRightArrow = function renderRightArrow() {
    var disabled = items.length <= numOfSlides || index === items.length - 1;
    var props = {
      disabled: disabled,
      onClick: handleNext
    };
    var rightArrowClasses = classNameBase + "-arrow " + classNameBase + "-arrowRight";
    if (ArrowRight) return /*#__PURE__*/React.createElement(ArrowRight, Object.assign({}, props, {
      className: rightArrowClasses
    }));
    return /*#__PURE__*/React.createElement("span", Object.assign({
      "arial-label": "Next",
      className: rightArrowClasses + " " + classNameBase + "-next",
      role: "button"
    }, props));
  };

  return /*#__PURE__*/React.createElement(React.Fragment, null, showArrows && /*#__PURE__*/React.createElement(React.Fragment, null, renderLeftArrow(), renderRightArrow()), /*#__PURE__*/React.createElement("div", {
    ref: sliderContainerDOMEl
  }, /*#__PURE__*/React.createElement("ul", {
    ref: slidesDOMEl
  }, itemsToRender.map(renderItem(numOfSlides)))));
}