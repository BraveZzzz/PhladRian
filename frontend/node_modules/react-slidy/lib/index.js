import React, { useEffect, useRef, useState } from 'react';
import ReactSlidySlider from './react-slidy-slider';

function noop() {}

var CLASSNAMES = {
  contain: 'react-Slidy--contain',
  cover: 'react-Slidy--cover',
  fullHeight: 'react-Slidy--fullHeight',
  fullWidth: 'react-Slidy--fullWidth'
};

var ReactSlidy = function ReactSlidy(_ref) {
  var ArrowLeft = _ref.ArrowLeft,
      ArrowRight = _ref.ArrowRight,
      children = _ref.children,
      _ref$classNameBase = _ref.classNameBase,
      classNameBase = _ref$classNameBase === void 0 ? 'react-Slidy' : _ref$classNameBase,
      _ref$doAfterDestroy = _ref.doAfterDestroy,
      doAfterDestroy = _ref$doAfterDestroy === void 0 ? noop : _ref$doAfterDestroy,
      _ref$doAfterInit = _ref.doAfterInit,
      doAfterInit = _ref$doAfterInit === void 0 ? noop : _ref$doAfterInit,
      _ref$doAfterSlide = _ref.doAfterSlide,
      doAfterSlide = _ref$doAfterSlide === void 0 ? noop : _ref$doAfterSlide,
      _ref$doBeforeSlide = _ref.doBeforeSlide,
      doBeforeSlide = _ref$doBeforeSlide === void 0 ? noop : _ref$doBeforeSlide,
      imageObjectFit = _ref.imageObjectFit,
      _ref$itemsToPreload = _ref.itemsToPreload,
      itemsToPreload = _ref$itemsToPreload === void 0 ? 1 : _ref$itemsToPreload,
      _ref$initialSlide = _ref.initialSlide,
      initialSlide = _ref$initialSlide === void 0 ? 0 : _ref$initialSlide,
      _ref$ease = _ref.ease,
      ease = _ref$ease === void 0 ? 'ease' : _ref$ease,
      _ref$lazyLoadSlider = _ref.lazyLoadSlider,
      lazyLoadSlider = _ref$lazyLoadSlider === void 0 ? true : _ref$lazyLoadSlider,
      _ref$lazyLoadConfig = _ref.lazyLoadConfig,
      lazyLoadConfig = _ref$lazyLoadConfig === void 0 ? {
    offset: 150
  } : _ref$lazyLoadConfig,
      _ref$keyboardNavigati = _ref.keyboardNavigation,
      keyboardNavigation = _ref$keyboardNavigati === void 0 ? false : _ref$keyboardNavigati,
      _ref$numOfSlides = _ref.numOfSlides,
      numOfSlides = _ref$numOfSlides === void 0 ? 1 : _ref$numOfSlides,
      _ref$sanitize = _ref.sanitize,
      sanitize = _ref$sanitize === void 0 ? true : _ref$sanitize,
      _ref$slide = _ref.slide,
      slide = _ref$slide === void 0 ? 0 : _ref$slide,
      _ref$slideSpeed = _ref.slideSpeed,
      slideSpeed = _ref$slideSpeed === void 0 ? 500 : _ref$slideSpeed,
      _ref$showArrows = _ref.showArrows,
      showArrows = _ref$showArrows === void 0 ? true : _ref$showArrows,
      _ref$useFullHeight = _ref.useFullHeight,
      useFullHeight = _ref$useFullHeight === void 0 ? false : _ref$useFullHeight,
      _ref$useFullWidth = _ref.useFullWidth,
      useFullWidth = _ref$useFullWidth === void 0 ? true : _ref$useFullWidth;

  var _useState = useState(!lazyLoadSlider),
      showSlider = _useState[0],
      setShowSlider = _useState[1];

  var nodeEl = useRef(null);
  useEffect(function () {
    var observer;

    if (lazyLoadSlider) {
      var initLazyLoadSlider = function initLazyLoadSlider() {
        // if we support IntersectionObserver, let's use it
        var _lazyLoadConfig$offse = lazyLoadConfig.offset,
            offset = _lazyLoadConfig$offse === void 0 ? 0 : _lazyLoadConfig$offse;
        observer = new window.IntersectionObserver(handleIntersection, {
          rootMargin: offset + "px 0px 0px"
        });
        observer.observe(nodeEl.current);
      };

      if (!('IntersectionObserver' in window)) {
        import('intersection-observer').then(initLazyLoadSlider);
      } else {
        initLazyLoadSlider();
      }
    }

    return function () {
      return observer && observer.disconnect();
    };
  }, [] // eslint-disable-line
  );

  var handleIntersection = function handleIntersection(_ref2, observer) {
    var entry = _ref2[0];

    if (entry.isIntersecting || entry.intersectionRatio > 0) {
      observer.unobserve(entry.target);
      setShowSlider(true);
    }
  };

  var numOfSlidesSanitzed = Math.min(numOfSlides, React.Children.count(children));
  var rootClassName = [classNameBase, useFullHeight && CLASSNAMES.fullHeight, useFullWidth && CLASSNAMES.fullWidth, imageObjectFit && CLASSNAMES[imageObjectFit]].filter(Boolean).join(' ');
  var reactSlidySliderProps = {
    ArrowLeft: ArrowLeft,
    ArrowRight: ArrowRight,
    children: children,
    classNameBase: classNameBase,
    doAfterDestroy: doAfterDestroy,
    doAfterInit: doAfterInit,
    doAfterSlide: doAfterSlide,
    doBeforeSlide: doBeforeSlide,
    ease: ease,
    initialSlide: initialSlide,
    itemsToPreload: itemsToPreload,
    keyboardNavigation: keyboardNavigation,
    numOfSlides: numOfSlides,
    slide: slide,
    showArrows: showArrows,
    slideSpeed: slideSpeed
  };
  return /*#__PURE__*/React.createElement("div", {
    className: rootClassName,
    ref: nodeEl
  }, showSlider && /*#__PURE__*/React.createElement(ReactSlidySlider, Object.assign({}, reactSlidySliderProps, {
    numOfSlides: sanitize ? numOfSlidesSanitzed : numOfSlides
  }), children));
};

export default ReactSlidy;