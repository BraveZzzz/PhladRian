{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport qs from 'qs';\nexport var stringifyParams = function stringifyParams(params) {\n  return qs.stringify(params, {\n    arrayFormat: 'repeat'\n  });\n};\nexport var getPure = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(fetchParam, stringifyParamsParam, url, params) {\n    var paramsStr, response, responseJSON;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            paramsStr = stringifyParamsParam(params);\n            _context.next = 3;\n            return fetchParam(\"\".concat(url, \"?\").concat(paramsStr), {\n              credentials: 'same-origin'\n            });\n\n          case 3:\n            response = _context.sent;\n\n            if (!(response.status >= 400)) {\n              _context.next = 6;\n              break;\n            }\n\n            throw new Error('Failed to fetch');\n\n          case 6:\n            _context.next = 8;\n            return response.json();\n\n          case 8:\n            responseJSON = _context.sent;\n            return _context.abrupt(\"return\", responseJSON);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getPure(_x, _x2, _x3, _x4) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var get = function get(url, params) {\n  return getPure(fetch, stringifyParams, url, params);\n};","map":{"version":3,"sources":["D:/PhladRian/frontend/node_modules/react-select-fetch/es/get.js"],"names":["_regeneratorRuntime","_asyncToGenerator","qs","stringifyParams","params","stringify","arrayFormat","getPure","_ref","mark","_callee","fetchParam","stringifyParamsParam","url","paramsStr","response","responseJSON","wrap","_callee$","_context","prev","next","concat","credentials","sent","status","Error","json","abrupt","stop","_x","_x2","_x3","_x4","apply","arguments","get","fetch"],"mappings":"AAAA,OAAOA,mBAAP,MAAgC,4BAAhC;AACA,OAAOC,iBAAP,MAA8B,yCAA9B;AACA,OAAOC,EAAP,MAAe,IAAf;AACA,OAAO,IAAIC,eAAe,GAAG,SAASA,eAAT,CAAyBC,MAAzB,EAAiC;AAC5D,SAAOF,EAAE,CAACG,SAAH,CAAaD,MAAb,EAAqB;AAC1BE,IAAAA,WAAW,EAAE;AADa,GAArB,CAAP;AAGD,CAJM;AAKP,OAAO,IAAIC,OAAO,GAAG,aAAa,YAAY;AAC5C,MAAIC,IAAI,GAAGP,iBAAiB,EAAE,aAAaD,mBAAmB,CAACS,IAApB,CAAyB,SAASC,OAAT,CAAiBC,UAAjB,EAA6BC,oBAA7B,EAAmDC,GAAnD,EAAwDT,MAAxD,EAAgE;AAClI,QAAIU,SAAJ,EAAeC,QAAf,EAAyBC,YAAzB;AACA,WAAOhB,mBAAmB,CAACiB,IAApB,CAAyB,SAASC,QAAT,CAAkBC,QAAlB,EAA4B;AAC1D,aAAO,CAAP,EAAU;AACR,gBAAQA,QAAQ,CAACC,IAAT,GAAgBD,QAAQ,CAACE,IAAjC;AACE,eAAK,CAAL;AACEP,YAAAA,SAAS,GAAGF,oBAAoB,CAACR,MAAD,CAAhC;AACAe,YAAAA,QAAQ,CAACE,IAAT,GAAgB,CAAhB;AACA,mBAAOV,UAAU,CAAC,GAAGW,MAAH,CAAUT,GAAV,EAAe,GAAf,EAAoBS,MAApB,CAA2BR,SAA3B,CAAD,EAAwC;AACvDS,cAAAA,WAAW,EAAE;AAD0C,aAAxC,CAAjB;;AAIF,eAAK,CAAL;AACER,YAAAA,QAAQ,GAAGI,QAAQ,CAACK,IAApB;;AAEA,gBAAI,EAAET,QAAQ,CAACU,MAAT,IAAmB,GAArB,CAAJ,EAA+B;AAC7BN,cAAAA,QAAQ,CAACE,IAAT,GAAgB,CAAhB;AACA;AACD;;AAED,kBAAM,IAAIK,KAAJ,CAAU,iBAAV,CAAN;;AAEF,eAAK,CAAL;AACEP,YAAAA,QAAQ,CAACE,IAAT,GAAgB,CAAhB;AACA,mBAAON,QAAQ,CAACY,IAAT,EAAP;;AAEF,eAAK,CAAL;AACEX,YAAAA,YAAY,GAAGG,QAAQ,CAACK,IAAxB;AACA,mBAAOL,QAAQ,CAACS,MAAT,CAAgB,QAAhB,EAA0BZ,YAA1B,CAAP;;AAEF,eAAK,EAAL;AACA,eAAK,KAAL;AACE,mBAAOG,QAAQ,CAACU,IAAT,EAAP;AA5BJ;AA8BD;AACF,KAjCM,EAiCJnB,OAjCI,CAAP;AAkCD,GApC0C,CAAf,CAA5B;;AAsCA,SAAO,SAASH,OAAT,CAAiBuB,EAAjB,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,GAA/B,EAAoC;AACzC,WAAOzB,IAAI,CAAC0B,KAAL,CAAW,IAAX,EAAiBC,SAAjB,CAAP;AACD,GAFD;AAGD,CA1CiC,EAA3B;AA2CP,OAAO,IAAIC,GAAG,GAAG,SAASA,GAAT,CAAavB,GAAb,EAAkBT,MAAlB,EAA0B;AACzC,SAAOG,OAAO,CAAC8B,KAAD,EAAQlC,eAAR,EAAyBU,GAAzB,EAA8BT,MAA9B,CAAd;AACD,CAFM","sourcesContent":["import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport qs from 'qs';\nexport var stringifyParams = function stringifyParams(params) {\n  return qs.stringify(params, {\n    arrayFormat: 'repeat'\n  });\n};\nexport var getPure = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(fetchParam, stringifyParamsParam, url, params) {\n    var paramsStr, response, responseJSON;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            paramsStr = stringifyParamsParam(params);\n            _context.next = 3;\n            return fetchParam(\"\".concat(url, \"?\").concat(paramsStr), {\n              credentials: 'same-origin'\n            });\n\n          case 3:\n            response = _context.sent;\n\n            if (!(response.status >= 400)) {\n              _context.next = 6;\n              break;\n            }\n\n            throw new Error('Failed to fetch');\n\n          case 6:\n            _context.next = 8;\n            return response.json();\n\n          case 8:\n            responseJSON = _context.sent;\n            return _context.abrupt(\"return\", responseJSON);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getPure(_x, _x2, _x3, _x4) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var get = function get(url, params) {\n  return getPure(fetch, stringifyParams, url, params);\n};"]},"metadata":{},"sourceType":"module"}